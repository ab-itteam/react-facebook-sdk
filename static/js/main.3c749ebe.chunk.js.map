{"version":3,"sources":["img/carapilssmall.png","serviceWorker.js","MembershipCard.js","App.js","AppRouter.js","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","request","require","QRCode","saveUser","userData","post","json","error","response","body","FacebookLogin","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fillInFbDetails","fb","state","name","userId","id","parsed","parseLocation","fbname","fbid","react_default","a","createElement","className","src","concat","alt","value","logo","carapilssmall","logoWidth","FacebookShareButton","url","FacebookIcon","size","round","Component","qs","search","App","facebookResponse","_this2","status","MembershipCard_FacebookLogin","facebook_login_with_button_default","appId","autoLoad","fields","callback","setState","AppRouter","BrowserRouter","basename","process","path","src_App_0","ReactDOM","render","src_AppRouter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c749ebe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/carapilssmall.c755a222.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Component} from 'react';\nimport './membershipCard.css'\nimport {FacebookShareButton, FacebookIcon} from 'react-share';\nimport * as qs from 'query-string';\nimport carapilssmall from './img/carapilssmall.png'\nconst request = require('request');\n\nconst postUrl = \"https://webhooks.mongodb-stitch.com/api/client/v2.0/app/carapils-yvjvz/service/carapilsrequests/incoming_webhook/saveUser\";\nconst QRCode = require('qrcode-react');\n\n\n\nconst saveUser = (userData) => {\n    request.post(\n        postUrl,\n        { json: userData },\n         (error, response, body) => {}\n    );\n};\n\nexport default class FacebookLogin extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.fillInFbDetails(this.props.location, this.props.fb)\n    }\n\n    fillInFbDetails = function (location, fb) {\n        if (fb) {\n            saveUser(fb);\n            this.state = {\n                name: fb.name,\n                userId: fb.id\n            };\n        } else {\n            const parsed = parseLocation(location);\n            this.state = {\n                name: parsed.fbname,\n                userId: parsed.fbid\n            }\n        }\n\n    };\n\n    render() {\n        return <div className=\"id-card-wrapper\">\n                <div className=\"id-card\">\n                    <p className='marqueeText'><marquee>WELCOME TO THE CARA PILS CLUB</marquee></p>\n                    <div className=\"profile-row\">\n                        <div className=\"dp\">\n                            <img src={`//graph.facebook.com/${this.state.userId}/picture?type=large`} alt={\"profile\"}/>\n                        </div>\n                        <div className=\"desc\">\n                            <h1>{this.state.name}</h1>\n                            <p>Official Cara Pils Club Member</p>\n                            <p><QRCode value=\"http://facebook.github.io/react/\" logo = {carapilssmall} logoWidth={50}/></p>\n                            <p></p>\n                        </div>\n                    </div>\n                   <div className='fbShareContainer'> <FacebookShareButton url={'https://carapils.club/card?name=test&fbid=10215558188322336'}> <FacebookIcon size={32} round={true}/> <p className=\"fbShareText\"> Sheir tis on Fajsboek to show your friends jou are THE SJIT </p></FacebookShareButton>\n                   </div>\n                </div>\n            </div>\n    }\n}\n\nconst parseLocation = (location) => {\n    if (!location) {\n        return;\n    } else {\n        return qs.parse(location.search);\n    }\n};\n\n\n","import React, {Component} from 'react';\nimport MembershipCard from './MembershipCard';\nimport './App.css';\nimport FacebookLogin from \"react-facebook-login\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            facebookResponse: null\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    {this.state.facebookResponse && this.state.facebookResponse.status !== \"unknown\" ?\n                        <MembershipCard fb={this.state.facebookResponse}/>\n                        :\n                        <FacebookLogin\n                            appId=\"203252890569525\"\n                            autoLoad={true}\n                            size=\"metro\"\n                            fields=\"name,email,picture\"\n                            callback={(response) => {\n                                this.setState({facebookResponse: response});\n                            }}/>}\n\n                </header>\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from \"react\";\nimport { Route, HashRouter, BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport MembershipCard from \"./MembershipCard\";\n\nconst AppRouter = () => (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <div>\n            <MembershipCard path=\"/card\"/>\n            <App path=\"/\"/>\n        </div>\n    </BrowserRouter>\n);\n\nexport default AppRouter;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport AppRouter from \"./AppRouter\";\n\nReactDOM.render(<AppRouter />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}