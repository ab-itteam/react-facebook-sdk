{"version":3,"sources":["serviceWorker.js","MembershipCard.js","App.js","AppRouter.js","index.js","img/carapilssmall.png"],"names":["Boolean","window","location","hostname","match","QRCode","require","FacebookLogin","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fillInFbDetails","fb","state","name","userId","id","console","log","parsed","parseLocation","fbname","fbid","react_default","a","createElement","className","src","concat","value","logo","carapilssmall","logoWidth","FacebookShareButton","url","FacebookIcon","size","round","Component","qs","search","componentClicked","App","facebookResponse","_this2","status","MembershipCard_FacebookLogin","facebook_login_with_button_default","appId","autoLoad","fields","onClick","callback","response","setState","AppRouter","HashRouter","Route","path","component","MembershipCard","ReactDOM","render","src_AppRouter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.07a9382c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Component} from 'react';\nimport ReactToPrint from \"react-to-print\";\nimport './membershipCard.css'\nimport {FacebookShareButton, FacebookIcon} from 'react-share';\nimport * as qs from 'query-string';\nimport carapilssmall from './img/carapilssmall.png'\nconst QRCode = require('qrcode-react');\n\n\n\nexport default class FacebookLogin extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.fillInFbDetails(this.props.location, this.props.fb)\n    }\n\n    fillInFbDetails = function (location, fb) {\n        if (fb) {\n            this.state = {\n                name: fb.name,\n                userId: fb.id\n            };\n            console.log(this.state);\n        } else {\n            const parsed = parseLocation(location);\n            console.log(parsed);\n            this.state = {\n                name: parsed.fbname,\n                userId: parsed.fbid\n            }\n        }\n    };\n\n    render() {\n        return <div className=\"id-card-wrapper\">\n                <div className=\"id-card\">\n                    <p className='marqueeText'><marquee>WELCOME TO THE CARA PILS CLUB</marquee></p>\n                    <div className=\"profile-row\">\n                        <div className=\"dp\">\n                            <img src={`//graph.facebook.com/${this.state.userId}/picture?type=large`}/>\n                        </div>\n                        <div className=\"desc\">\n                            <h1>{this.state.name}</h1>\n                            <p>Official Cara Pils Club Member</p>\n                            <p><QRCode value=\"http://facebook.github.io/react/\" logo = {carapilssmall} logoWidth={50}/></p>\n                            <p></p>\n                        </div>\n                    </div>\n                   <div className='fbShareContainer'> <FacebookShareButton url={'carapils.club/card?name=test&fbid=10215558188322336'}> <FacebookIcon size={32} round={true}/> <p className=\"fbShareText\"> Sheir tis on Fajsboek to show your friends jou are TE SJIT </p></FacebookShareButton>\n                   </div>\n                </div>\n            </div>\n    }\n}\n\n\nconst parseLocation = (location) => {\n    if (!location) {\n        return;\n    } else {\n        return qs.parse(location.search);\n    }\n};\n\n\n","import React, {Component} from 'react';\nimport MembershipCard from './MembershipCard';\nimport './App.css';\nimport FacebookLogin from \"react-facebook-login\";\n\n\nconst componentClicked = () => {\n    console.log('click');\n};\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            facebookResponse: null\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    {this.state.facebookResponse && this.state.facebookResponse.status !== \"unknown\" ?\n                        <MembershipCard fb={this.state.facebookResponse}/>\n                        :\n                        <FacebookLogin\n                            appId=\"203252890569525\"\n                            autoLoad={true}\n                            size=\"metro\"\n                            fields=\"name,email,picture\"\n                            onClick={componentClicked}\n                            callback={(response) => {\n                                console.log(response);\n                                this.setState({facebookResponse: response});\n                            }}/>}\n\n                </header>\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from \"react\";\nimport { Route, HashRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport MembershipCard from \"./MembershipCard\";\n\nconst AppRouter = () => (\n    <HashRouter>\n        <div>\n            <Route path=\"/\" component={App} />\n            <Route path=\"/card/\" component={MembershipCard} />\n        </div>\n    </HashRouter>\n);\n\nexport default AppRouter;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport AppRouter from \"./AppRouter\";\n\nReactDOM.render(<AppRouter />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/carapilssmall.c755a222.png\";"],"sourceRoot":""}